# data

import pandas as pd
import numpy as np#导入两个第三方库

n,m=map(int,input("请设定变量数(n)和约束数(m):").split())
#首先设定一下变量数和约束数的数量，都为整数，split（）为可以输入多个数

print("请输入%d个物品价值:"%n)
value=list(map(float,input().split()))#用来接收物品的价值，定义为列表

data_1=[] #定义一个空列表，用来存储下面将要输入的属性
for i in range(m): #利用for循环来显示将要输入第几个属性
    print("请输入第%d个属性:"%(i+1))
    a=list(map(int, input().split()))#用来接收输入的属性，定义为列表
    data_1.append(a)
    #将输入的属性添加到刚刚的空列表中，为建立二维表做好准备，相当于一个中间值
    
data = pd.DataFrame(data_1)#将属性变成数据帧（二维数组表格）

print("请输入%d个属性的约束条件:"%m)   
b=list(map(float,input().split())) #用来接收属性的约束条件，定义为列表
data['约束条件']=b #将属性的约束条件添加到data数据帧中成为一列，并与每行的属性相对应
print(data) #查看数据帧

v=0 #用于临时存储物品价值的变量（临时价值）
max_1=value[0] #我们最终要求的最高价值（最终价值）
def recall(i):#定义一个函数f，用于回溯，参数为i 
    global v,max_1 #调用全局变量
    if i >n-1: #判断是否到达叶子结点，到了就回溯到上一层
        if v>max_1: #判断临时价值是否大于最终价值
            max_1=v
    else:
        c=0
        c=(data['约束条件']-data[i])>=0  #约束条件 - 属性的值，赋值给c
        if c.all(): #判断，如果c全部为True才为真，进行下面，反之执行if下面的代码
            data['约束条件']=data['约束条件']-data[i]  #当满足一个属性时，约束条件就要减掉它原本的值
            v=v+value[i] #零时价值要加上属性对应那个价值
            recall(i+1)#调用方法,判断是否是叶子结点
            v=v-value[i]  #回溯到上一层，减掉原来的价值
            data['约束条件']=data['约束条件']+data[i]  #回溯以后，约束条件又得以增加
        recall(i+1)  #递归调用，回溯到上一层，继续原来的方法运算
        
recall(0)  #开始调用函数，从0开始，0 1 2 3 4 5
print("物品的最大价值为%f元！"%max_1)
